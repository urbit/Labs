{
  "components": {
    "urbit.near/widget/app": {
      "code": "const { page, tab, ...passProps } = props;\n\nconst routes = {\n  // Add new routes below\n  home: {\n    path: \"urbit.near/widget/page.home\", // notice how this coincides with apps/urbit/widget/page/home.js\n    blockHeight: \"final\",\n    init: {\n      name: \"Home\",\n    },\n  },\n  playground: {\n    path: \"urbit.near/widget/page.playground\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Playground\",\n    },\n  },\n};\n\nconst { AppLayout } = VM.require(\"urbit.near/widget/template.AppLayout\") || {\n  AppLayout: () => <></>\n};\n\nif (!page) page = Object.keys(routes)[0] || \"home\";\n\nconst Root = styled.div``;\n\nfunction Router({ active, routes }) {\n  const routeParts = active.split(\".\");\n\n  console.log('active', active)\n\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      // Handle 404 or default case for unknown routes\n      return <p>404 Not Found</p>;\n    }\n  }\n  const urbitCode = \"const { page, tab, ...passProps } = props;\\n\\nconst routes = {\\n  // Add new routes below\\n  home: {\\n    path: \\\"urbit.near/widget/page.home\\\", // notice how this coincides with apps/urbit/widget/page/home.js\\n    blockHeight: \\\"final\\\",\\n    init: {\\n      name: \\\"Home\\\",\\n    },\\n  },\\n  playground: {\\n    path: \\\"urbit.near/widget/page.playground\\\",\\n    blockHeight: \\\"final\\\",\\n    init: {\\n      name: \\\"Playground\\\",\\n    },\\n  },\\n};\\n\\nconst { AppLayout } = VM.require(\\\"urbit.near/widget/template.AppLayout\\\") || {\\n  AppLayout: () => <></>\\n};\\n\\nif (!page) page = Object.keys(routes)[0] || \\\"home\\\";\\n\\nconst Root = styled.div``;\\n\\nfunction Router({ active, routes }) {\\n  const routeParts = active.split(\\\".\\\");\\n\\n  let currentRoute = routes;\\n  let src = \\\"\\\";\\n  let defaultProps = {};\\n\\n  for (let part of routeParts) {\\n    if (currentRoute[part]) {\\n      currentRoute = currentRoute[part];\\n      src = currentRoute.path;\\n\\n      if (currentRoute.init) {\\n        defaultProps = { ...defaultProps, ...currentRoute.init };\\n      }\\n    } else {\\n      // Handle 404 or default case for unknown routes\\n      return <p>404 Not Found</p>;\\n    }\\n  }\\n\\n  return (\\n    <div key={active}>\\n      <Widget\\n        src={src}\\n        props={{\\n          currentPath: `/urbit.near/widget/app?page=${page}`,\\n          page: tab,\\n          ...passProps,\\n          ...defaultProps,\\n        }}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst Container = styled.div`\\n  display: flex;\\n  height: 100%;\\n`;\\n\\nconst Content = styled.div`\\n  width: 100%;\\n  height: 100%;\\n`;\\n\\nreturn (\\n  <Root>\\n    <Container>\\n      <AppLayout page={page} routes={routes} {...props}>\\n        <Content>\\n          <Router active={page} routes={routes} />\\n        </Content>\\n      </AppLayout>\\n    </Container>\\n  </Root>\\n);\\n\"\n  //VM COnfigure\n  //= \"const { page, tab, ...passProps } = props;\\n\\nconst routes = {\\n  // Add new routes below\\n  home: {\\n    path: \\\"urbit.near/widget/page.home\\\", // notice how this coincides with apps/urbit/widget/page/home.js\\n    blockHeight: \\\"final\\\",\\n    init: {\\n      name: \\\"Home\\\",\\n    },\\n  },\\n  playground: {\\n    path: \\\"urbit.near/widget/page.playground\\\",\\n    blockHeight: \\\"final\\\",\\n    init: {\\n      name: \\\"Playground\\\",\\n    },\\n  },\\n};\\n\\nconst { AppLayout } = VM.require(\\\"urbit.near/widget/template.AppLayout\\\") || {\\n  AppLayout: () => <></>\\n};\\n\\nif (!page) page = Object.keys(routes)[0] || \\\"home\\\";\\n\\nconst Root = styled.div``;\\n\\nfunction Router({ active, routes }) {\\n  const routeParts = active.split(\\\".\\\");\\n\\n  let currentRoute = routes;\\n  let src = \\\"\\\";\\n  let defaultProps = {};\\n\\n  for (let part of routeParts) {\\n    if (currentRoute[part]) {\\n      currentRoute = currentRoute[part];\\n      src = currentRoute.path;\\n\\n      if (currentRoute.init) {\\n        defaultProps = { ...defaultProps, ...currentRoute.init };\\n      }\\n    } else {\\n      // Handle 404 or default case for unknown routes\\n      return <p>404 Not Found</p>;\\n    }\\n  }\\n\\n  return (\\n    <div key={active}>\\n      <Widget\\n        src={src}\\n        props={{\\n          currentPath: `/urbit.near/widget/app?page=${page}`,\\n          page: tab,\\n          ...passProps,\\n          ...defaultProps,\\n        }}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst Container = styled.div`\\n  display: flex;\\n  height: 100%;\\n`;\\n\\nconst Content = styled.div`\\n  width: 100%;\\n  height: 100%;\\n`;\\n\\nreturn (\\n  <Root>\\n    <Container>\\n      <AppLayout page={page} routes={routes} {...props}>\\n        <Content>\\n          <Router active={page} routes={routes} />\\n        </Content>\\n      </AppLayout>\\n    </Container>\\n  </Root>\\n);\\n\"\n\n  return (\n    <div key={active}>\n      {/* <Widget\n        src={src}\n        props={{\n          currentPath: `/urbit.near/widget/app?page=${page}`,\n          page: tab,\n          ...passProps,\n          ...defaultProps,\n        }}\n      /> */}\n      <Widget\n      code={urbitCode}\n      />\n    </div>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nreturn (\n  <Root>\n    <Container>\n      <AppLayout page={page} routes={routes} {...props}>\n        <Content>\n          <Router active={page} routes={routes} />\n        </Content>\n      </AppLayout>\n    </Container>\n  </Root>\n);\n"
    },
    "urbit.near/widget/template.AppLayout": {
      "code": "const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\n\nconst ContentContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nconst Header = ({ page, routes, ...props }) => (\n  <Widget\n    src=\"urbit.near/widget/components.Header\"\n    props={{ page, routes, ...props }}\n  />\n);\n\nconst Footer = (props) => {\n  return <></>;\n};\n\n// Define the new component that follows the AppLayout pattern\nfunction AppLayout({ routes, page, children, ...props }) {\n  return (\n    <Container>\n      <Header page={page} routes={routes} {...props} />\n      <ContentContainer key={page}>{children}</ContentContainer>\n      <Footer page={page} />\n    </Container>\n  );\n}\n\nreturn { AppLayout };\n"
    },
    "urbit.near/widget/page.playground": {
      "code": "const GlowLight = styled.span`\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 10px;\n  background-color: ${(props) => (props.isConnected ? \"green\" : \"red\")};\n  box-shadow: 0 0 8px ${(props) => (props.isConnected ? \"green\" : \"red\")};\n`;\n\nconst Label = styled.span`\n  font-size: 16px;\n`;\n\nconst StatusIndicator = ({ isConnected, label }) => {\n  return (\n    <div className=\"d-flex align-items-center\">\n      <GlowLight isConnected={isConnected} />\n      <Label>{label}</Label>\n    </div>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 20px;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: #f5f5f5; /* Light grey background */\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst SectionTitle = styled.h2`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  height: 200px;\n  border: 1px solid #ccc; /* Faint grey border */\n  border-radius: 10px;\n  padding: 10px;\n  box-sizing: border-box;\n  font-family: inherit;\n  resize: none; /* Optional: Disables resizing */\n`;\n\nconst Button = styled.button``;\nconst [response, setResponse] = useState(\"\");\nconsole.log(Urbit)\n\nreturn (\n  <Container>\n    <Section as=\"div\" style={{ flexDirection: \"column\" }}>\n      <Button\n        onClick={() => {\n          Urbit.pokeUrbit('near-handler', 'near-handler-action', {\n            // hard-coded dummy pubkey\n            'add': '0x11d9.2405.6c6f.f37a.675a.b2f4.0c99.8cfb.ea8b.f032.c83e.79a6.5305.72eb.0e9f.08c0'\n          }).then((res) => {\n            console.log(Urbit)\n            setResponse(res);\n          });\n        }}\n      >\n        pokeUrbit\n      </Button>\n      <Button\n        onClick={() => {\n          Urbit.pokeUrbit('near-handler', 'near-handler-action',{\n            'del': '0x11d9.2405.6c6f.f37a.675a.b2f4.0c99.8cfb.ea8b.f032.c83e.79a6.5305.72eb.0e9f.08c0'\n          })\n        }}\n      >\n        pokeNearHandler\n      </Button>\n      <Button\n        onClick={() => {\n          Urbit.scryNearHandler(\"/accs\")\n          .then((res) => {\n            setResponse(res);\n          });\n        }}\n      >\n        scryNearHandler /accs\n      </Button>\n    </Section>\n    <Section as=\"div\" style={{ flexDirection: \"column\" }}>\n      <SectionTitle>Console</SectionTitle>\n      <TextArea\n        placeholder=\"Output from testing will appear here...\"\n        value={response}\n        disabled\n      />\n    </Section>\n  </Container>\n);\n"
    },
    "urbit.near/widget/page.home": {
      "code": "const GlowLight = styled.span`\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 10px;\n  background-color: ${(props) => (props.isConnected ? \"green\" : \"red\")};\n  box-shadow: 0 0 8px ${(props) => (props.isConnected ? \"green\" : \"red\")};\n`;\n\nconst Label = styled.span`\n  font-size: 16px;\n`;\n\nconst StatusIndicator = ({ isConnected, label }) => {\n  return (\n    <div className=\"d-flex align-items-center\">\n      <GlowLight isConnected={isConnected} />\n      <Label>{label}</Label>\n    </div>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 20px;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: #f5f5f5; /* Light grey background */\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst SectionTitle = styled.h2`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nreturn (\n  <Container>\n    <Section>\n      <div>\n        <SectionTitle>Configuration</SectionTitle>\n        <StatusIndicator isConnected={Urbit} label={\"VM Configured\"} />\n      </div>\n    </Section>\n  </Container>\n);\n"
    },
    "urbit.near/widget/components.Header": {
      "code": "const Navbar = styled.div`\n  width: 64px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 24px 48px;\n  width: 100%;\n\n  background-color: #0b0c14;\n  border-bottom: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    width: 100%;\n\n    a {\n      display: flex;\n    }\n  }\n`;\n\nconst Button = styled.button``;\n\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => {},\n};\n\nconst NavLink = ({ to, children }) => (\n  <div></div>\n  // <Link\n  //   key={to}\n  //   to={href({\n  //     widgetSrc: \"urbit.near/widget/app\",\n  //     params: {\n  //       page: to,\n  //     },\n  //   })}\n  // >\n  //   {children}\n  // </Link>\n);\n\nconst [showMenu, setShowMenu] = useState(false);\nconst toggleDropdown = () => setShowMenu(!showMenu);\n\nconst AppHeader = ({ page, routes, ...props }) => (\n  <Navbar>\n    { <Link\n      style={{ flex: 1 }}\n      to={href({\n        widgetSrc: \"urbit.near/widget/app\",\n        params: {\n          page: \"home\",\n        },\n      })}\n    >\n      <img\n        style={{ width: 85, objectFit: \"cover\" }}\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Urbit_Logo.svg/1200px-Urbit_Logo.svg.png\"\n      />\n    </Link>}\n    <ButtonGroup style={{ flex: 1 }}>\n      {routes &&\n        (Object.keys(routes) || []).map((k) => {\n          const route = routes[k];\n          if (route.hide) {\n            return null;\n          }\n          return (\n            <NavLink to={k}>\n              <Button key={k}>\n                {route.init.icon && <i className={route.init.icon}></i>}\n                {route.init.name}\n              </Button>\n            </NavLink>\n          );\n        })}\n    </ButtonGroup>\n  </Navbar>\n);\n\nreturn <AppHeader page={props.page} routes={props.routes} {...props} />;\n"
    }
  },
  "data": {
    "urbit.near": {}
  }
}
